name: Handle Metadata Dispatch

on:
  repository_dispatch:
    types: [new-release]

jobs:
  handle:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout metadata repo
        uses: actions/checkout@v4

      - name: Parse payload
        id: parse
        run: |
            echo '${{ toJson(github.event.client_payload) }}' > payload.json
            jq . payload.json

            repo=$(jq -r .repo payload.json)
            tag=$(jq -r .tag payload.json)
            REPO_NAME="${repo##*/}"

            echo "REPO=$repo" >> $GITHUB_ENV
            echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
            echo "TAG=$tag" >> $GITHUB_ENV

            IFS='.' read -r MAJOR MINOR PATCH <<< "${tag#v}"
            echo "MAJOR=$MAJOR" >> $GITHUB_ENV
            echo "MINOR=$MINOR" >> $GITHUB_ENV
            echo "PATCH=$PATCH" >> $GITHUB_ENV
            
            # Validate required vars
            for var in REPO_NAME MAJOR MINOR PATCH; do
            if [ -z "${!var}" ]; then
                echo "❌ Error: $var is unset or empty"
                exit 1
            fi
            done
            if [[ ! "$REPO_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
                echo "❌ Invalid REPO_NAME: $REPO_NAME"
                exit 1
            fi

            #  168442440833.dkr.ecr.us-west-2.amazonaws.com/baton-github:0.1.28-arm64
            URI="168442440833.dkr.ecr.us-west-2.amazonaws.com/baton-${REPO_NAME}:${MAJOR}.${MINOR}.${PATCH}-arm64"
            echo "IMAGE_URI=$URI" >> $GITHUB_ENV


      - name: Debug ENV values
        run: |
            echo "REPO_NAME=$REPO_NAME"
            echo "TAG=$TAG"
            echo "MAJOR=$MAJOR"
            echo "MINOR=$MINOR"
            echo "PATCH=$PATCH"

      - name: Fetch Schemas
        run: |
            AUTH="Authorization: Bearer ${{ secrets.METADATA_REPO_PAT }}"
            for file in config.json baton_capabilities.json; do
                url="https://raw.githubusercontent.com/$REPO/$TAG/$file"
                tmp=$(mktemp)

                echo "Fetching $file..."
                status=$(curl -s -o "$tmp" -w "%{http_code}" -H "$AUTH" "$url")

                if [ "$status" -ne 200 ]; then
                    echo "❌ Failed to fetch $file from $url (status $status)"
                    echo "--- Response ---"
                    cat "$tmp"
                    echo "----------------"
                    exit 1
                fi

                mv "$tmp" "$file"
                echo "✅ Downloaded $file"
            done

      - name: Write metadata file
        run: |
            rm payload.json
            mkdir -p "metadata/TRAINFACED/$REPO_NAME/$MAJOR/$MINOR"

            jq -n \
                --argjson config "$(cat config.json)" \
                --argjson baton_capabilities "$(cat baton_capabilities.json)" \
                --arg image_uri "$IMAGE_URI" \
                '{config: $config, baton_capabilities: $baton_capabilities, image_uri: $image_uri}' \
                > "metadata/TRAINFACED/$REPO_NAME/$MAJOR/$MINOR/$PATCH.json"
            
            rm config.json baton_capabilities.json

      - name: Compute safe branch name
        id: branch
        run: |
            safe_repo="${REPO//\//-}"
            echo "branch=metadata-${safe_repo}-${TAG}" >> $GITHUB_OUTPUT

      - name: Create pull request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
            token: ${{ secrets.METADATA_REPO_PAT }}
            commit-message: "Add metadata for [TRAINFACED]/${{ env.REPO_NAME }}@${{ env.TAG }}"
            title: "Add metadata for [TRAINFACED]/${{ env.REPO_NAME }}@${{ env.TAG }}"
            body: |
                This PR contains configuration metadata for:
                - Repo: ${{ env.REPO_NAME }}
                - TAG: ${{ env.TAG }}
            branch: ${{ steps.branch.outputs.branch }}

      - name: Enable auto-merge for PR
        if: steps.cpr.outputs.pull-request-url != ''
        env:
            GH_TOKEN: ${{ secrets.METADATA_REPO_PAT }}
            PR_ID: ${{ steps.cpr.outputs.pull-request-id }}
        run: |
            pr_number=${{ steps.cpr.outputs.pull-request-number }}
            repo="${{ github.repository }}"
            pr_data=$(gh api repos/$repo/pulls/$pr_number)
            pr_id=$(echo "$pr_data" | jq -r '.node_id')
            echo "PR_ID=$pr_id" >> $GITHUB_ENV
            echo "PR_NUMBER=$pr_number" >> $GITHUB_ENV
            echo "Raw ID from create-pull-request: $PR_ID"
            gh api graphql -f query='
            mutation($pullRequestId: ID!) {
                enablePullRequestAutoMerge(input: {
                pullRequestId: $pullRequestId,
                mergeMethod: SQUASH
                }) {
                pullRequest {
                    number
                    autoMergeRequest {
                    enabledAt
                    }
                }
                }
            }' \
            -f pullRequestId="$PR_ID"